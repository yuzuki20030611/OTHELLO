# Docker Composeの設定ファイル
# 複数のコンテナを管理できるが、今回はアプリ1つだけ
services:
  # サービス名「app」を定義（好きな名前でOK）
  app:
    # 現在のディレクトリの中のDockerfileを探して実行
    # 「.」= 現在のフォルダにあるDockerfileを使用
    build: .
    
    # ポートの設定（重要！）
    ports:
      # 自分のパソコンとコンテナの番号を繋げる
      # "ホスト側:コンテナ側" の形式
      # localhost:3001 → コンテナの3001番ポートに転送
      - "3001:3001"
    
    # ボリューム設定（ファイル共有）
    volumes:
      # 現在のフォルダをコンテナの/appフォルダと同期
      # コードを変更すると即座にコンテナにも反映される
      - .:/app
      
      # node_modulesはコンテナ内のものを優先
      # ホスト側のnode_modulesで上書きされるのを防ぐ
      # （WindowsとLinuxでバイナリが違うため）
      - /app/node_modules
      
      # .nextフォルダもコンテナ内のものを優先
      # ビルド結果がホスト側の空フォルダで消されるのを防ぐ
      - /app/.next 
    
    # 環境変数の設定
    environment:
      # ファイル変更の監視機能を有効化
      # MacやWindowsでファイル変更を正しく検知するため
      # （Linuxコンテナとの違いを吸収）
      # 定期的にファイルをチェックしに行く　Next.js全般のファイル監視
      - CHOKIDAR_USEPOLLING=true
      # Webpack（Next.jsの内部で使用）のファイル監視もポーリング方式に変更  Webpackのホットリロード機能のファイル監視
      - WATCHPACK_POLLING=true
      # 開発モード Node.jsアプリケーションを「開発モード」で実行
      - NODE_ENV=development
    # 開発サーバーで起動（リアルタイム更新対応）
    command: npm run dev -- -p 3001